// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Nrql.flex

// Use the Grammar-Kit plugin to generate the NrqlLexer class: Right click -> Run JFlex Generator.
// Choose codestream/jb as the output directory - the class will be generated under codestream/jb/src/main/gen.

package com.codestream.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.codestream.language.NrqlTypes;
import com.intellij.psi.TokenType;


class NrqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\6\3\0\1\7\2\0\1\10\1\11"+
    "\1\0\1\12\1\0\1\13\12\14\1\15\1\0\1\16"+
    "\1\17\1\16\2\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\12\0\1\3\252\0"+
    "\2\57\115\0\1\60\u01a8\0\2\3\u0100\0\1\61\325\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\3\3\1\4\1\1\1\3"+
    "\26\5\3\1\2\0\1\6\1\7\1\0\3\5\1\10"+
    "\1\5\1\10\11\5\1\0\2\5\1\0\1\3\1\5"+
    "\1\0\2\5\1\0\3\5\1\0\1\5\1\10\1\3"+
    "\12\5\1\0\2\5\1\0\3\5\1\0\4\5\1\0"+
    "\1\5\1\0\1\3\4\0\1\11\1\0\2\5\1\3"+
    "\2\5\1\10\1\0\4\5\1\10\2\5\1\0\6\5"+
    "\2\0\1\5\1\0\3\5\2\0\1\5\1\0\2\5"+
    "\2\0\3\5\1\0\1\5\1\12\14\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\4\5"+
    "\1\0\1\5\7\0\1\12\1\0\4\5\1\0\11\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\5\1\0\2\5"+
    "\2\0\3\5\1\0\5\5\1\0\3\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\2\0\2\5\1\0\3\10"+
    "\7\0\3\5\1\0\7\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\5\1\0\1\5\1\10\3\0\3\5\1\0"+
    "\3\5\1\0\7\5\4\0\3\5\3\0\1\5\1\0"+
    "\1\5\7\0\1\7\1\5\1\0\4\5\1\0\1\5"+
    "\1\0\2\5\3\0\1\5\2\0\3\5\1\0\7\5"+
    "\4\0\5\5\5\0\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\4\5\1\0\1\5\1\0\2\5\2\0\1\5"+
    "\1\0\2\5\1\0\4\5\2\0\1\5\1\0\2\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\13\3\0\1\5"+
    "\1\0\3\5\2\0\1\5\1\0\1\5\1\0\2\5"+
    "\2\0\2\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\2\5\2\0\1\5"+
    "\5\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\62\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\310\0\62\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u02ee"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\62"+
    "\0\u1324\0\u1356\0\u1388\0\u02ee\0\u13ba\0\u13ec\0\62\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u02ee\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\62"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u1518\0\u2cba\0\u3520\0\u3552\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\62"+
    "\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4"+
    "\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54"+
    "\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4"+
    "\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074"+
    "\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204"+
    "\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394"+
    "\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524"+
    "\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4"+
    "\0\u46e6\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844"+
    "\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4"+
    "\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\62\0\u4ace\0\u4b00\0\u4b32"+
    "\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2"+
    "\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20\0\u4e52"+
    "\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2"+
    "\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc\0\u510e\0\u5140\0\u5172"+
    "\0\u51a4\0\u51d6\0\u5208\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302"+
    "\0\u5334\0\u5366\0\u5398\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u5492"+
    "\0\u54c4\0\u54f6\0\u5528\0\u555a\0\u558c\0\u55be\0\u55f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\2\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\6\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\22\1\26\1\27\1\30\1\31\1\32\1\22\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\22\1\41\1\22"+
    "\1\42\3\2\1\22\1\43\1\44\1\2\63\0\2\3"+
    "\1\0\1\3\63\0\1\45\53\0\7\46\1\47\52\46"+
    "\12\0\1\50\62\0\1\50\37\0\1\51\22\0\1\11"+
    "\64\0\1\6\56\0\1\22\3\0\6\22\1\52\4\22"+
    "\1\53\1\22\1\54\4\22\1\55\2\22\1\56\4\22"+
    "\4\0\1\22\1\0\1\57\15\0\1\22\3\0\4\22"+
    "\1\60\25\22\4\0\1\22\17\0\1\22\3\0\16\22"+
    "\1\61\13\22\4\0\1\22\17\0\1\22\3\0\1\62"+
    "\3\22\1\63\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\15\22\1\64\11\22\1\65\2\22\4\0\1\22\17\0"+
    "\1\22\3\0\1\66\7\22\1\67\10\22\1\70\10\22"+
    "\4\0\1\22\1\71\16\0\1\22\3\0\32\22\4\0"+
    "\1\22\17\0\1\22\3\0\10\22\1\72\5\22\1\73"+
    "\13\22\4\0\1\22\1\74\16\0\1\22\3\0\15\22"+
    "\1\75\4\22\1\76\7\22\4\0\1\22\1\0\1\77"+
    "\15\0\1\22\3\0\16\22\1\100\13\22\4\0\1\22"+
    "\17\0\1\22\3\0\10\22\1\101\21\22\4\0\1\22"+
    "\1\102\16\0\1\22\3\0\4\22\1\103\3\22\1\104"+
    "\5\22\1\105\13\22\4\0\1\22\1\106\16\0\1\22"+
    "\3\0\16\22\1\107\13\22\4\0\1\22\17\0\1\22"+
    "\3\0\5\22\1\110\13\22\1\111\10\22\4\0\1\22"+
    "\17\0\1\22\3\0\4\22\1\112\11\22\1\113\2\22"+
    "\1\114\10\22\4\0\1\22\17\0\1\22\3\0\1\115"+
    "\3\22\1\116\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\4\22\1\117\2\22\1\120\1\121\12\22\1\122\1\123"+
    "\5\22\4\0\1\22\1\124\16\0\1\22\3\0\7\22"+
    "\1\125\1\126\21\22\4\0\1\22\1\127\16\0\1\22"+
    "\3\0\15\22\1\130\1\22\1\131\2\22\1\132\7\22"+
    "\4\0\1\22\1\0\1\133\15\0\1\22\3\0\1\134"+
    "\31\22\4\0\1\22\17\0\1\22\3\0\4\22\1\135"+
    "\2\22\1\136\1\137\21\22\4\0\1\22\1\140\16\0"+
    "\1\22\3\0\4\22\1\141\25\22\4\0\1\22\60\0"+
    "\1\142\41\0\1\143\4\0\1\77\15\0\1\77\25\0"+
    "\1\144\2\0\1\145\1\124\12\0\1\146\1\147\12\0"+
    "\1\124\10\0\1\150\53\0\2\50\1\0\57\50\10\0"+
    "\1\151\65\0\1\22\3\0\6\22\1\152\7\22\1\110"+
    "\13\22\4\0\1\22\17\0\1\22\3\0\23\22\1\153"+
    "\6\22\4\0\1\22\17\0\1\22\3\0\3\22\1\154"+
    "\26\22\4\0\1\22\17\0\1\22\3\0\2\22\1\110"+
    "\13\22\1\155\13\22\4\0\1\22\17\0\1\22\3\0"+
    "\4\22\1\156\25\22\4\0\1\22\25\0\1\157\13\0"+
    "\1\160\37\0\1\22\3\0\6\22\1\161\23\22\4\0"+
    "\1\22\17\0\1\22\3\0\14\22\1\162\7\22\1\163"+
    "\5\22\4\0\1\22\17\0\1\22\3\0\23\22\1\164"+
    "\4\22\1\165\1\22\4\0\1\22\17\0\1\22\3\0"+
    "\13\22\1\166\6\22\1\167\7\22\4\0\1\22\1\0"+
    "\1\170\15\0\1\22\3\0\3\22\1\171\26\22\4\0"+
    "\1\22\17\0\1\22\3\0\23\22\1\172\6\22\4\0"+
    "\1\22\17\0\1\22\3\0\2\22\1\173\27\22\4\0"+
    "\1\22\17\0\1\22\3\0\4\22\1\174\6\22\1\175"+
    "\16\22\4\0\1\22\17\0\1\22\3\0\16\22\1\176"+
    "\13\22\4\0\1\22\27\0\1\177\6\0\1\200\42\0"+
    "\1\22\3\0\22\22\1\201\7\22\4\0\1\22\1\0"+
    "\1\202\15\0\1\22\3\0\24\22\1\203\5\22\4\0"+
    "\1\22\45\0\1\202\15\0\1\202\15\0\1\22\3\0"+
    "\2\22\1\204\17\22\1\205\7\22\4\0\1\22\1\0"+
    "\1\206\5\0\1\207\7\0\1\22\3\0\32\22\4\0"+
    "\1\22\7\0\1\207\71\0\1\22\3\0\10\22\1\210"+
    "\21\22\4\0\1\22\1\211\16\0\1\22\3\0\12\22"+
    "\1\212\1\22\1\213\15\22\4\0\1\22\2\0\1\214"+
    "\32\0\1\214\1\0\1\215\24\0\1\214\14\0\1\22"+
    "\3\0\1\216\31\22\4\0\1\22\17\0\1\22\3\0"+
    "\15\22\1\217\14\22\4\0\1\22\17\0\1\22\3\0"+
    "\15\22\1\220\14\22\4\0\1\22\40\0\1\221\40\0"+
    "\1\22\3\0\23\22\1\222\2\22\1\223\3\22\4\0"+
    "\1\22\17\0\1\22\3\0\3\22\1\224\26\22\4\0"+
    "\1\22\17\0\1\22\3\0\21\22\1\225\10\22\4\0"+
    "\1\22\17\0\1\22\3\0\13\22\1\226\16\22\4\0"+
    "\1\22\17\0\1\22\3\0\4\22\1\227\25\22\4\0"+
    "\1\22\17\0\1\22\3\0\23\22\1\230\6\22\4\0"+
    "\1\22\17\0\1\22\3\0\23\22\1\231\6\22\4\0"+
    "\1\22\17\0\1\22\3\0\2\22\1\232\10\22\1\233"+
    "\5\22\1\234\10\22\4\0\1\22\17\0\1\22\3\0"+
    "\16\22\1\235\13\22\4\0\1\22\17\0\1\22\3\0"+
    "\15\22\1\236\14\22\4\0\1\22\17\0\1\22\3\0"+
    "\3\22\1\237\26\22\4\0\1\22\17\0\1\22\3\0"+
    "\14\22\1\223\15\22\4\0\1\22\40\0\1\240\40\0"+
    "\1\22\3\0\10\22\1\241\21\22\4\0\1\22\1\242"+
    "\16\0\1\22\3\0\14\22\1\243\15\22\4\0\1\22"+
    "\37\0\1\244\41\0\1\22\3\0\10\22\1\245\12\22"+
    "\1\246\6\22\4\0\1\22\1\247\16\0\1\22\3\0"+
    "\3\22\1\250\26\22\4\0\1\22\17\0\1\22\3\0"+
    "\10\22\1\251\21\22\4\0\1\22\1\252\32\0\1\252"+
    "\26\0\1\252\16\0\1\22\3\0\13\22\1\253\16\22"+
    "\4\0\1\22\17\0\1\22\3\0\4\22\1\254\25\22"+
    "\4\0\1\22\17\0\1\22\3\0\4\22\1\255\25\22"+
    "\4\0\1\22\17\0\1\22\3\0\23\22\1\256\6\22"+
    "\4\0\1\22\46\0\1\257\32\0\1\22\3\0\1\260"+
    "\31\22\4\0\1\22\10\0\1\261\76\0\1\262\17\0"+
    "\1\206\15\0\1\206\23\0\1\263\10\0\1\264\5\0"+
    "\1\265\56\0\1\266\46\0\1\267\72\0\1\270\25\0"+
    "\10\151\1\0\42\151\1\271\6\151\14\0\1\22\3\0"+
    "\21\22\1\272\10\22\4\0\1\22\17\0\1\22\3\0"+
    "\4\22\1\273\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\5\22\1\110\24\22\4\0\1\22\17\0\1\22\3\0"+
    "\21\22\1\274\10\22\4\0\1\22\30\0\1\157\50\0"+
    "\1\22\3\0\10\22\1\275\21\22\4\0\1\22\1\276"+
    "\16\0\1\22\3\0\17\22\1\277\12\22\4\0\1\22"+
    "\17\0\1\22\3\0\15\22\1\300\14\22\4\0\1\22"+
    "\17\0\1\22\3\0\4\22\1\301\25\22\4\0\1\22"+
    "\17\0\1\22\3\0\22\22\1\110\7\22\4\0\1\22"+
    "\1\0\1\157\15\0\1\22\3\0\4\22\1\302\25\22"+
    "\4\0\1\22\17\0\1\22\3\0\2\22\1\110\27\22"+
    "\4\0\1\22\25\0\1\157\53\0\1\22\3\0\16\22"+
    "\1\303\13\22\4\0\1\22\17\0\1\22\3\0\21\22"+
    "\1\304\10\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\305\25\22\4\0\1\22\17\0\1\22\3\0\13\22"+
    "\1\306\16\22\4\0\1\22\17\0\1\22\3\0\23\22"+
    "\1\307\6\22\4\0\1\22\17\0\1\22\3\0\14\22"+
    "\1\110\15\22\4\0\1\22\36\0\1\310\71\0\1\311"+
    "\32\0\1\22\3\0\23\22\1\312\6\22\4\0\1\22"+
    "\46\0\1\313\32\0\1\22\3\0\21\22\1\165\10\22"+
    "\4\0\1\22\17\0\1\22\3\0\13\22\1\314\16\22"+
    "\4\0\1\22\17\0\1\22\3\0\4\22\1\315\25\22"+
    "\4\0\1\22\27\0\1\316\72\0\1\317\40\0\1\22"+
    "\3\0\15\22\1\110\14\22\4\0\1\22\40\0\1\157"+
    "\40\0\1\22\3\0\4\22\1\154\25\22\4\0\1\22"+
    "\17\0\1\22\3\0\10\22\1\305\21\22\4\0\1\22"+
    "\1\320\26\0\1\6\65\0\1\320\26\0\1\320\16\0"+
    "\1\22\3\0\22\22\1\321\7\22\4\0\1\22\1\0"+
    "\1\322\15\0\1\22\3\0\24\22\1\323\5\22\4\0"+
    "\1\22\17\0\1\22\3\0\23\22\1\324\6\22\4\0"+
    "\1\22\47\0\1\325\21\0\1\326\7\0\1\22\3\0"+
    "\32\22\4\0\1\22\17\0\1\22\3\0\4\22\1\327"+
    "\25\22\4\0\1\22\17\0\1\22\3\0\2\22\1\330"+
    "\27\22\4\0\1\22\17\0\1\22\3\0\10\22\1\331"+
    "\21\22\4\0\1\22\1\332\16\0\1\22\3\0\25\22"+
    "\1\333\4\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\223\25\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\334\25\22\4\0\1\22\17\0\1\22\3\0\16\22"+
    "\1\335\13\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\336\25\22\4\0\1\22\17\0\1\22\3\0\10\22"+
    "\1\337\21\22\4\0\1\22\1\340\16\0\1\22\3\0"+
    "\26\22\1\341\3\22\4\0\1\22\17\0\1\22\3\0"+
    "\2\22\1\342\27\22\4\0\1\22\17\0\1\22\3\0"+
    "\3\22\1\343\26\22\4\0\1\22\25\0\1\344\53\0"+
    "\1\22\3\0\22\22\1\345\7\22\4\0\1\22\1\0"+
    "\1\346\43\0\1\346\15\0\1\346\15\0\1\22\3\0"+
    "\4\22\1\347\25\22\4\0\1\22\27\0\1\350\51\0"+
    "\1\22\3\0\20\22\1\351\11\22\4\0\1\22\17\0"+
    "\1\22\3\0\10\22\1\352\21\22\4\0\1\22\1\353"+
    "\42\0\1\354\35\0\1\22\3\0\1\355\31\22\4\0"+
    "\1\22\17\0\1\22\3\0\15\22\1\356\14\22\4\0"+
    "\1\22\40\0\1\357\40\0\1\22\3\0\24\22\1\337"+
    "\5\22\4\0\1\22\17\0\1\22\3\0\12\22\1\165"+
    "\17\22\4\0\1\22\2\0\1\360\14\0\1\22\3\0"+
    "\21\22\1\342\10\22\4\0\1\22\17\0\1\22\3\0"+
    "\7\22\1\361\22\22\4\0\1\22\32\0\1\362\46\0"+
    "\1\22\3\0\21\22\1\301\10\22\4\0\1\22\56\0"+
    "\1\363\41\0\1\364\64\0\1\365\47\0\1\366\65\0"+
    "\1\340\26\0\1\340\50\0\1\367\36\0\1\370\36\0"+
    "\10\151\1\371\42\151\1\271\6\151\14\0\1\22\3\0"+
    "\4\22\1\372\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\21\22\1\110\10\22\4\0\1\22\17\0\1\22\3\0"+
    "\1\373\31\22\4\0\1\22\17\0\1\22\3\0\15\22"+
    "\1\374\14\22\4\0\1\22\40\0\1\375\40\0\1\22"+
    "\3\0\1\376\31\22\4\0\1\22\17\0\1\22\3\0"+
    "\23\22\1\223\6\22\4\0\1\22\17\0\1\22\3\0"+
    "\16\22\1\377\13\22\4\0\1\22\17\0\1\22\3\0"+
    "\23\22\1\u0100\6\22\4\0\1\22\17\0\1\22\3\0"+
    "\5\22\1\u0101\24\22\4\0\1\22\17\0\1\22\3\0"+
    "\1\u0102\31\22\4\0\1\22\17\0\1\22\3\0\23\22"+
    "\1\110\6\22\4\0\1\22\17\0\1\22\3\0\3\22"+
    "\1\u0103\26\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\u0104\25\22\4\0\1\22\26\0\1\u0105\62\0\1\u0106"+
    "\51\0\1\22\3\0\16\22\1\u0107\13\22\4\0\1\22"+
    "\41\0\1\u0108\37\0\1\22\3\0\24\22\1\u0109\5\22"+
    "\4\0\1\22\17\0\1\22\3\0\21\22\1\u010a\10\22"+
    "\4\0\1\22\44\0\1\u010b\56\0\1\u010c\5\0\1\u010d"+
    "\60\0\1\157\32\0\1\22\3\0\24\22\1\u010e\5\22"+
    "\4\0\1\22\47\0\1\u010f\31\0\1\22\3\0\23\22"+
    "\1\u0110\6\22\4\0\1\22\17\0\1\22\3\0\7\22"+
    "\1\u0111\22\22\4\0\1\22\46\0\1\u0112\46\0\1\u0113"+
    "\2\0\1\u0114\23\0\1\u0113\16\0\1\22\3\0\21\22"+
    "\1\u0115\10\22\4\0\1\22\17\0\1\22\3\0\4\22"+
    "\1\u0116\25\22\4\0\1\22\17\0\1\22\3\0\2\22"+
    "\1\234\27\22\4\0\1\22\25\0\1\265\53\0\1\22"+
    "\3\0\10\22\1\u0117\21\22\4\0\1\22\1\u0118\16\0"+
    "\1\22\3\0\15\22\1\u0119\14\22\4\0\1\22\17\0"+
    "\1\22\3\0\15\22\1\u011a\14\22\4\0\1\22\17\0"+
    "\1\22\3\0\2\22\1\305\27\22\4\0\1\22\17\0"+
    "\1\22\3\0\4\22\1\u011b\25\22\4\0\1\22\27\0"+
    "\1\u011c\51\0\1\22\3\0\3\22\1\u011d\17\22\1\u011e"+
    "\6\22\4\0\1\22\17\0\1\22\3\0\4\22\1\110"+
    "\25\22\4\0\1\22\17\0\1\22\3\0\4\22\1\u011f"+
    "\25\22\4\0\1\22\27\0\1\157\51\0\1\22\3\0"+
    "\3\22\1\u0120\10\22\1\u0121\11\22\1\u0122\1\22\1\u0123"+
    "\1\22\4\0\1\22\26\0\1\u0124\10\0\1\u0125\11\0"+
    "\1\u0126\1\0\1\u0127\25\0\1\22\3\0\16\22\1\u0128"+
    "\3\22\1\u0129\3\22\1\u012a\3\22\4\0\1\22\1\0"+
    "\1\u012b\37\0\1\u012c\3\0\1\u012b\3\0\1\u012d\11\0"+
    "\1\u012b\15\0\1\22\3\0\24\22\1\u012e\5\22\4\0"+
    "\1\22\17\0\1\22\3\0\13\22\1\110\16\22\4\0"+
    "\1\22\36\0\1\157\72\0\1\u012f\31\0\1\22\3\0"+
    "\23\22\1\342\6\22\4\0\1\22\17\0\1\22\3\0"+
    "\6\22\1\110\23\22\4\0\1\22\31\0\1\157\75\0"+
    "\1\157\15\0\1\157\15\0\1\22\3\0\23\22\1\u0130"+
    "\6\22\4\0\1\22\46\0\1\u0131\53\0\1\u0132\70\0"+
    "\1\u0133\52\0\1\u0134\46\0\1\320\62\0\1\u0135\17\0"+
    "\1\u0136\42\0\1\u0137\50\0\1\u0138\62\0\1\22\3\0"+
    "\6\22\1\250\23\22\4\0\1\22\17\0\1\22\3\0"+
    "\6\22\1\230\23\22\4\0\1\22\17\0\1\22\3\0"+
    "\15\22\1\u0139\14\22\4\0\1\22\40\0\1\u013a\40\0"+
    "\1\22\3\0\21\22\1\u013b\10\22\4\0\1\22\17\0"+
    "\1\22\3\0\5\22\1\223\24\22\4\0\1\22\17\0"+
    "\1\22\3\0\4\22\1\u013c\25\22\4\0\1\22\17\0"+
    "\1\22\3\0\14\22\1\u0121\11\22\1\u0122\1\22\1\u0123"+
    "\1\22\4\0\1\22\17\0\1\22\3\0\17\22\1\u013d"+
    "\12\22\4\0\1\22\17\0\1\22\3\0\12\22\1\u013e"+
    "\17\22\4\0\1\22\2\0\1\u013f\14\0\1\22\3\0"+
    "\21\22\1\223\10\22\4\0\1\22\35\0\1\u013f\26\0"+
    "\1\u013f\41\0\1\270\34\0\1\22\3\0\6\22\1\u0140"+
    "\23\22\4\0\1\22\31\0\1\u0141\47\0\1\22\3\0"+
    "\3\22\1\u0142\26\22\4\0\1\22\17\0\1\22\3\0"+
    "\23\22\1\u0143\6\22\4\0\1\22\46\0\1\u0144\61\0"+
    "\1\u0145\51\0\1\u0146\42\0\1\22\3\0\21\22\1\u0147"+
    "\10\22\4\0\1\22\44\0\1\u0148\34\0\1\22\3\0"+
    "\4\22\1\165\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\16\22\1\377\3\22\1\110\7\22\4\0\1\22\1\0"+
    "\1\157\25\0\1\360\72\0\1\6\54\0\1\u0149\26\0"+
    "\1\u0149\16\0\1\22\3\0\1\22\1\u014a\30\22\4\0"+
    "\1\22\17\0\1\22\3\0\15\22\1\u014b\14\22\4\0"+
    "\1\22\17\0\1\22\3\0\16\22\1\u014c\13\22\4\0"+
    "\1\22\41\0\1\u014d\37\0\1\22\3\0\23\22\1\u014e"+
    "\6\22\4\0\1\22\17\0\1\22\3\0\3\22\1\165"+
    "\26\22\4\0\1\22\17\0\1\22\3\0\1\u014f\31\22"+
    "\4\0\1\22\17\0\1\22\3\0\1\u0150\31\22\4\0"+
    "\1\22\17\0\1\22\3\0\25\22\1\223\4\22\4\0"+
    "\1\22\17\0\1\22\3\0\1\u0151\31\22\4\0\1\22"+
    "\17\0\1\22\3\0\16\22\1\u0152\13\22\4\0\1\22"+
    "\17\0\1\22\3\0\4\22\1\u0153\25\22\4\0\1\22"+
    "\17\0\1\22\3\0\4\22\1\u0154\25\22\4\0\1\22"+
    "\23\0\1\u0155\77\0\1\u0156\47\0\1\u0157\61\0\1\u0158"+
    "\51\0\1\22\3\0\5\22\1\u0159\24\22\4\0\1\22"+
    "\17\0\1\22\3\0\4\22\1\u015a\6\22\1\u015b\7\22"+
    "\1\u015c\6\22\4\0\1\22\17\0\1\22\3\0\10\22"+
    "\1\u015d\21\22\4\0\1\22\1\u015e\26\0\1\u015f\6\0"+
    "\1\u0160\7\0\1\u0161\43\0\1\u0162\64\0\1\u015e\26\0"+
    "\1\u015e\16\0\1\22\3\0\4\22\1\u0163\25\22\4\0"+
    "\1\22\27\0\1\u0164\51\0\1\22\3\0\10\22\1\u0165"+
    "\21\22\4\0\1\22\1\u0166\32\0\1\u0166\26\0\1\u0166"+
    "\56\0\1\u0167\30\0\1\u0168\61\0\1\360\56\0\1\u0169"+
    "\61\0\1\u016a\106\0\1\270\30\0\1\22\3\0\10\22"+
    "\1\u016b\21\22\4\0\1\22\1\u016c\32\0\1\u016c\26\0"+
    "\1\u016c\16\0\1\22\3\0\4\22\1\u016d\25\22\4\0"+
    "\1\22\17\0\1\22\3\0\5\22\1\u016e\24\22\4\0"+
    "\1\22\17\0\1\22\3\0\16\22\1\u016f\13\22\4\0"+
    "\1\22\17\0\1\22\3\0\4\22\1\u0170\25\22\4\0"+
    "\1\22\27\0\1\u0171\51\0\1\22\3\0\21\22\1\u0172"+
    "\10\22\4\0\1\22\44\0\1\u0173\34\0\1\22\3\0"+
    "\4\22\1\u0174\25\22\4\0\1\22\17\0\1\22\3\0"+
    "\10\22\1\u0175\21\22\4\0\1\22\1\u0176\32\0\1\u0176"+
    "\26\0\1\u0176\6\0\1\u0177\110\0\1\6\42\0\1\22"+
    "\3\0\4\22\1\u0178\25\22\4\0\1\22\27\0\1\u0179"+
    "\67\0\1\214\26\0\1\214\14\0\1\22\3\0\30\22"+
    "\1\110\1\22\4\0\1\22\17\0\1\22\3\0\23\22"+
    "\1\u017a\6\22\4\0\1\22\17\0\1\22\3\0\24\22"+
    "\1\241\5\22\4\0\1\22\47\0\1\242\31\0\1\22"+
    "\3\0\10\22\1\u017b\21\22\4\0\1\22\1\u017c\16\0"+
    "\1\22\3\0\23\22\1\u017d\6\22\4\0\1\22\17\0"+
    "\1\22\3\0\6\22\1\u017e\23\22\4\0\1\22\17\0"+
    "\1\22\3\0\30\22\1\223\1\22\4\0\1\22\17\0"+
    "\1\22\3\0\15\22\1\u017f\14\22\4\0\1\22\17\0"+
    "\1\22\3\0\4\22\1\u0180\25\22\4\0\1\22\17\0"+
    "\1\22\3\0\1\u0104\31\22\4\0\1\22\53\0\1\270"+
    "\46\0\1\u0181\50\0\1\u0182\55\0\1\u0106\55\0\1\22"+
    "\3\0\3\22\1\u0120\26\22\4\0\1\22\17\0\1\22"+
    "\3\0\21\22\1\234\10\22\4\0\1\22\17\0\1\22"+
    "\3\0\10\22\1\u0183\21\22\4\0\1\22\1\u0184\16\0"+
    "\1\22\3\0\1\u0185\31\22\4\0\1\22\17\0\1\22"+
    "\3\0\15\22\1\u0186\14\22\4\0\1\22\40\0\1\u0187"+
    "\65\0\1\265\50\0\1\u0184\26\0\1\u0184\22\0\1\u0188"+
    "\64\0\1\u0124\52\0\1\22\3\0\2\22\1\u0189\27\22"+
    "\4\0\1\22\25\0\1\u018a\53\0\1\22\3\0\14\22"+
    "\1\u018b\15\22\4\0\1\22\37\0\1\u018c\35\0\1\u018d"+
    "\75\0\1\u018e\100\0\1\u018f\44\0\1\u0190\47\0\1\22"+
    "\3\0\15\22\1\u0191\14\22\4\0\1\22\40\0\1\u0192"+
    "\40\0\1\22\3\0\26\22\1\u0193\3\22\4\0\1\22"+
    "\17\0\1\22\3\0\21\22\1\70\10\22\4\0\1\22"+
    "\17\0\1\22\3\0\13\22\1\250\16\22\4\0\1\22"+
    "\17\0\1\22\3\0\30\22\1\u011b\1\22\4\0\1\22"+
    "\53\0\1\u011c\25\0\1\22\3\0\1\123\31\22\4\0"+
    "\1\22\23\0\1\147\55\0\1\22\3\0\31\22\1\u0194"+
    "\4\0\1\22\17\0\1\22\3\0\15\22\1\u0195\14\22"+
    "\4\0\1\22\40\0\1\u0196\61\0\1\u0197\40\0\1\22"+
    "\3\0\14\22\1\u0198\15\22\4\0\1\22\37\0\1\u0199"+
    "\41\0\1\22\3\0\1\373\7\22\1\u019a\21\22\4\0"+
    "\1\22\1\u019b\16\0\1\22\3\0\16\22\1\210\13\22"+
    "\4\0\1\22\41\0\1\211\37\0\1\22\3\0\1\u019c"+
    "\31\22\4\0\1\22\17\0\1\22\3\0\12\22\1\u013e"+
    "\12\22\1\37\4\22\4\0\1\22\2\0\1\u013f\14\0"+
    "\1\22\3\0\23\22\1\u019d\6\22\4\0\1\22\17\0"+
    "\1\22\3\0\12\22\1\223\17\22\4\0\1\22\2\0"+
    "\1\270\43\0\1\u019e\50\0\1\270\26\0\1\270\14\0"+
    "\1\22\3\0\2\22\1\230\27\22\4\0\1\22\25\0"+
    "\1\u019f\53\0\1\22\3\0\14\22\1\u01a0\15\22\4\0"+
    "\1\22\17\0\1\22\3\0\3\22\1\u01a1\26\22\4\0"+
    "\1\22\26\0\1\u01a2\72\0\1\u01a3\41\0\1\22\3\0"+
    "\16\22\1\u01a4\13\22\4\0\1\22\41\0\1\u01a5\37\0"+
    "\1\22\3\0\4\22\1\u01a6\25\22\4\0\1\22\27\0"+
    "\1\u01a7\106\0\1\u01a8\30\0\1\u01a9\73\0\1\u013f\12\0"+
    "\1\u01aa\13\0\1\u013f\14\0\1\22\3\0\6\22\1\171"+
    "\23\22\4\0\1\22\31\0\1\u01ab\47\0\1\22\3\0"+
    "\10\22\1\u01ac\21\22\4\0\1\22\1\u01ad\16\0\1\22"+
    "\3\0\4\22\1\u01ae\25\22\4\0\1\22\17\0\1\22"+
    "\3\0\23\22\1\u01af\6\22\4\0\1\22\46\0\1\u01b0"+
    "\62\0\1\u010d\31\0\1\22\3\0\4\22\1\u01b1\25\22"+
    "\4\0\1\22\27\0\1\u01b2\51\0\1\22\3\0\13\22"+
    "\1\230\16\22\4\0\1\22\36\0\1\u019f\42\0\1\22"+
    "\3\0\1\22\1\u01b3\30\22\4\0\1\22\17\0\1\22"+
    "\3\0\7\22\1\223\22\22\4\0\1\22\32\0\1\270"+
    "\56\0\1\270\51\0\1\22\3\0\17\22\1\110\12\22"+
    "\4\0\1\22\17\0\1\22\3\0\16\22\1\u01b4\13\22"+
    "\4\0\1\22\41\0\1\u01b5\62\0\1\157\36\0\1\22"+
    "\3\0\24\22\1\163\5\22\4\0\1\22\47\0\1\u01b6"+
    "\31\0\1\22\3\0\31\22\1\u01b7\4\0\1\22\54\0"+
    "\1\u01b8\34\0\1\u01b9\56\0\1\u01ba\60\0\1\u01bb\77\0"+
    "\1\u01bc\37\0\1\22\3\0\23\22\1\u01bd\6\22\4\0"+
    "\1\22\46\0\1\u01be\32\0\1\22\3\0\21\22\1\u01af"+
    "\10\22\4\0\1\22\17\0\1\22\3\0\16\22\1\110"+
    "\13\22\4\0\1\22\41\0\1\157\37\0\1\22\3\0"+
    "\15\22\1\u01bf\14\22\4\0\1\22\40\0\1\u01c0\40\0"+
    "\1\22\3\0\1\u01c1\31\22\4\0\1\22\17\0\1\22"+
    "\3\0\26\22\1\223\3\22\4\0\1\22\51\0\1\270"+
    "\50\0\1\u01c2\40\0\1\22\3\0\16\22\1\u01c3\13\22"+
    "\4\0\1\22\41\0\1\u01c4\64\0\1\u01b0\40\0\1\u01c5"+
    "\74\0\1\u01c6\53\0\1\u01c7\50\0\1\22\3\0\7\22"+
    "\1\110\22\22\4\0\1\22\32\0\1\157\46\0\1\22"+
    "\3\0\23\22\1\u011b\6\22\4\0\1\22\46\0\1\u011c"+
    "\32\0\1\22\3\0\22\22\1\337\7\22\4\0\1\22"+
    "\1\0\1\340\44\0\1\270\32\0\1\22\3\0\15\22"+
    "\1\342\14\22\4\0\1\22\40\0\1\344\66\0\1\340"+
    "\15\0\1\340\45\0\1\340\51\0\1\u0125\11\0\1\u0126"+
    "\1\0\1\u0127\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22050];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\36\1\2\0\1\11\1\1"+
    "\1\0\17\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\3\1\1\0\15\1\1\0\2\1\1\0\3\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\4\0\1\11"+
    "\1\0\5\1\1\11\1\0\7\1\1\0\6\1\2\0"+
    "\1\1\1\0\3\1\2\0\1\1\1\0\2\1\2\0"+
    "\3\1\1\0\16\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\4\1\1\0\1\1\7\0"+
    "\1\11\1\0\4\1\1\0\11\1\2\0\1\1\1\0"+
    "\2\1\3\0\1\1\1\0\2\1\2\0\3\1\1\0"+
    "\5\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\3\1\7\0\3\1\1\0"+
    "\7\1\2\0\1\1\1\0\2\1\3\0\1\1\1\0"+
    "\2\1\3\0\3\1\1\0\3\1\1\0\7\1\4\0"+
    "\3\1\3\0\1\1\1\0\1\1\7\0\1\11\1\1"+
    "\1\0\4\1\1\0\1\1\1\0\2\1\3\0\1\1"+
    "\2\0\3\1\1\0\7\1\4\0\5\1\5\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\2\1\1\0\4\1"+
    "\2\0\1\1\1\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\11\3\0\1\1\1\0\3\1\2\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\5\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NrqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 12: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 13: break;
          case 3:
            { return NrqlTypes.OPERATOR;
            }
          // fall through
          case 14: break;
          case 4:
            { return NrqlTypes.NUMBER;
            }
          // fall through
          case 15: break;
          case 5:
            { return NrqlTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 16: break;
          case 6:
            { return NrqlTypes.SINGLE_QUOTED_STRING;
            }
          // fall through
          case 17: break;
          case 7:
            { return NrqlTypes.COMMENT;
            }
          // fall through
          case 18: break;
          case 8:
            { return NrqlTypes.KEYWORD;
            }
          // fall through
          case 19: break;
          case 9:
            { return NrqlTypes.PREPROCESSOR;
            }
          // fall through
          case 20: break;
          case 10:
            { return NrqlTypes.FUNCTION;
            }
          // fall through
          case 21: break;
          case 11:
            { return NrqlTypes.DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
