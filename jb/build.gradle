plugins {
    id "java"
    id "idea"
    id "org.jetbrains.intellij" version "1.12.0"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "de.undercouch.download" version "5.1.0"
}

group "com.codestream"

version "14.23.1"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url = "https://europe-maven.pkg.dev/jxbrowser/releases" }
    maven { url = "https://www.jetbrains.com/intellij-repository/snapshots" }
}

ext {
    jxBrowserVersion = "7.18"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.10"

    implementation "com.teamdev.jxbrowser:jxbrowser:${jxBrowserVersion}"
    implementation "com.teamdev.jxbrowser:jxbrowser-swing:${jxBrowserVersion}"

    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.12.0"
    implementation "com.google.guava:guava:30.0-jre"
    implementation "com.github.salomonbrys.kotson:kotson:2.5.0"

    implementation "commons-io:commons-io:2.7"
    implementation("org.reflections:reflections:0.10.2") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    testImplementation "io.mockk:mockk:1.12.4"
    testImplementation "io.kotest:kotest-assertions-core:5.3.1"

}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

patchPluginXml {
    changeNotes = "${file('docs/change-notes.html').getText('UTF-8')}"
    pluginDescription = "${file('docs/description.html').getText('UTF-8')}"
}

idea {
    module {
        excludeDirs += file("src/main/resources/agent")
        excludeDirs += file("src/main/resources/webview")
    }
}


intellij {
//    type = "RD"
    type = "IU"
    // the version parameter dictates which jars will be used at compilation time

    version = "2022.1.1" // earliest version we support
    // version = "2022.1.1" // Rider version

    // version = "231.5920-EAP-CANDIDATE-SNAPSHOT"
    // version = "231.5920.14"
    // version "2019.2.3"
    // version "2019.3"
    // version "IC-2019.2.2"
    // version "2018.3.4" // you can also specify dot dot releases
    // version "IC-2018.2.7" //
    // version "PC-2018.2"

    intellij.updateSinceUntilBuild = false

    // sandboxDir = "$System.env.HOME/ide-sandbox" // It is sometimes useful to not have IDE config inside source control

    // 2021.2.1
    // plugins = ['java', 'git4idea', 'org.jetbrains.plugins.go:212.5080.55', 'Pythonid:212.5080.64', 'org.jetbrains.plugins.ruby:212.5080.8', 'com.jetbrains.php:212.5080.71']
    // 2022.1.4
    // plugins = ['java', 'git4idea', 'org.jetbrains.plugins.go:221.6008.13', 'Pythonid:221.6008.17', 'org.jetbrains.plugins.ruby:221.6008.13']
    // 2022.1.1
    plugins = [
        'java',
        'Git4Idea',
        'org.jetbrains.plugins.go:221.5591.52',
        'Pythonid:221.5591.52',
        'org.jetbrains.plugins.ruby:221.5591.52',
        'com.jetbrains.php:221.5591.58',
        'org.jetbrains.kotlin:221-1.8.0-release-345-IJ5591.52',
        'JavaScript'
    ]
}

runIde {
//    jbrVersion "8u202b1483.58"
//    jbrVersion "11_0_2b159"
//    jvmArgs '-Dsun.java2d.uiScale.enabled=false'
//    jvmArgs '-Dkotlinx.coroutines.debug=on'
//    jvmArgs '-Dcom.codestream.recordRequests=true'
    jvmArgs "-Dcom.codestream.webview=$projectDir/src/main/resources/webview"
    jvmArgs "-Dcom.codestream.agent=$projectDir/../shared/agent/dist"
    jvmArgs '-Xmx2048m'
    jvmArgs '-Xms128m'
    // M1 mac workaround - for now need to run on a locally installed IDE, different from the build dependency
    // specified via type/version
    // set ideDir in ~/.gradle/gradle.properties i.e. ideDir=/Applications/IntelliJ IDEA.app/Contents
    if (project.ideDir && !project.ideDir.isEmpty()) {
        ideDir.set(file(project.ideDir))
    }
}

tasks.withType(Test) {
    environment 'TEST_MODE', 'true'
}

test.outputs.upToDateWhen {false}

import org.gradle.internal.os.OperatingSystem

task buildDeps(type: Exec) {
    String npm = 'npm';
    if (OperatingSystem.current().isWindows()) {
        npm = 'npm.cmd'
    }

    workingDir "$projectDir"
    commandLine npm, 'run', 'bundle'
}

task buildDepsMac(type: Exec) {
    workingDir "$projectDir"
    commandLine 'npm', 'run', 'bundle:mac'
}

task copyAgent(type: Copy) {
    from "$projectDir/../shared/agent/dist"
    include "**/*"
    into "$projectDir/src/main/resources/agent"
}

task copyProtobuf(type: Copy) {
    from "$projectDir/../shared/protobuf"
    include "**/*"
    into "$projectDir/src/main/resources/protobuf"
}

def createCopyNodeTask(String platform) {
    String taskName = "copyNode-" + platform
    String supplementalSoftwarePath = System.getenv("TCBUILD_SUPPLEMENTAL_SOFTWARE_PATH")
    String nodeVersion = 'v16.17.1'
    return tasks.create(taskName, Copy) {
        from "$supplementalSoftwarePath/node/node-$nodeVersion-${platform}"
        include "**/*"
        into "$projectDir/src/main/resources/agent/node-${platform}"
        onlyIf {
            System.getenv("TCBUILD_BYPASS_SUPPLEMENTAL_SOFTWARE") == null
        }
    }
}

task copyNode {}
copyNode.dependsOn (
    createCopyNodeTask("darwin-arm64"),
    createCopyNodeTask("darwin-x64"),
    createCopyNodeTask("linux-x64"),
    createCopyNodeTask("win-x64")
)

task buildDependencies {}
buildDependencies.dependsOn buildDeps, copyAgent, copyProtobuf

task buildDependenciesMac {}
buildDependenciesMac.dependsOn buildDepsMac, copyAgent, copyProtobuf

buildPlugin.dependsOn copyNode, buildDependencies

tasks {
    buildPlugin {
        exclude { "coroutines" in it.name }
    }
    prepareSandbox {
        exclude { "coroutines" in it.name }
    }
}

task buildDebugDeps(type: Exec) {
    String npm = 'npm';
    if (OperatingSystem.current().isWindows()) {
        npm = 'npm.cmd'
    }

    workingDir "$projectDir"
    commandLine npm, 'run', 'build'
}

task copyDebugAgent(type: Copy) {
    from "$projectDir/../shared/agent/dist"
    include "**/*"
    into "$projectDir/src/main/resources/agent"
}
copyDebugAgent.dependsOn buildDebugDeps

task buildDebugDependencies {}
buildDebugDependencies.dependsOn buildDebugDeps, copyDebugAgent, copyProtobuf











