import { Response } from "undici";
import { isEmpty } from "lodash";
import { ResponseError } from "vscode-jsonrpc/lib/messages";
import {
	criticalityList,
	CriticalityType,
	ERROR_GENERIC_USE_ERROR_MESSAGE,
	ERROR_VM_NOT_SETUP,
	GetCsecLibraryDetailsRequest,
	GetCsecLibraryDetailsResponse,
	GetCsecLibraryDetailsType,
	RiskSeverity,
	ThirdPartyDisconnect,
	ThirdPartyProviderConfig,
} from "@codestream/protocols/agent";

import { SessionContainer } from "../../../container";
import { Logger } from "../../../logger";
import { CodeStreamSession } from "../../../session";
import { log, lspHandler, lspProvider } from "../../../system";
import { ThirdPartyProviderBase } from "../../thirdPartyProviderBase";
import { ExtraRequestInit } from "../../../system/fetchCore";

const API_TIMEOUT = 30000;

const options: ExtraRequestInit = {
	timeout: API_TIMEOUT,
};

export type NrCsecError = {
	timestamp?: number;
	status?: number;
	error?: string;
	message?: string;
	path?: string;
};

export function isNrCsecError(obj: unknown): obj is NrCsecError {
	const maybe = obj as NrCsecError;
	return (
		typeof maybe.timestamp === "number" &&
		typeof maybe.status === "number" &&
		!isEmpty(maybe.error) &&
		!isEmpty(maybe.message) &&
		!isEmpty(maybe.path)
	);
}

const critScore: Record<CriticalityType, number> = {
	CRITICAL: 5,
	HIGH: 4,
	MODERATE: 3,
	LOW: 2,
};

function isCriticalityType(maybe: unknown): maybe is CriticalityType {
	return criticalityList.includes(maybe as CriticalityType);
}

function maxCriticality(highestCriticality: CriticalityType, criticality: string): CriticalityType {
	if (!isCriticalityType(criticality)) {
		return highestCriticality;
	}
	if (critScore[highestCriticality] < critScore[criticality]) {
		return criticality;
	} else {
		return highestCriticality;
	}
}

@lspProvider("newrelic-csec")
export class CsecVulnerabilitiesProvider extends ThirdPartyProviderBase {
	// private csecLibraryDataCache = new Cache<any>({ defaultTtl: 1800 * 1000 }); // 30 minutes

	constructor(session: CodeStreamSession, config: ThirdPartyProviderConfig) {
		super(session, config);
	}

	get displayName(): string {
		return "Iast Vulnerability Management";
	}

	get headers(): { [p: string]: string } {
		const accessToken = this.accessToken;
		if (!accessToken) {
			throw new Error(`Missing accessToken for ${this.name}`);
		}
		return {
			Authorization: `Bearer ${accessToken}`,
			"Content-Type": "application/json",
		};
	}

	get name(): string {
		return "newrelic"; // Use existing providerInfo to get API key
	}

	get baseUrl(): string {
		return this.apiUrl;
	}

	get apiUrl() {
		const csecApiUrl = SessionContainer.instance().session.csecApiUrl;
		return csecApiUrl || "https://csec-workflow-api.staging-service.newrelic.com";
	}

	get productUrl() {
		return this.apiUrl.indexOf("staging") > -1
			? "https://staging-one.newrelic.com/iast"
			: "https://one.newrelic.com/iast";
	}

	@log()
	async onDisconnected(request?: ThirdPartyDisconnect) {
		// this.csecLibraryDataCache.clear();

		return super.onDisconnected(request);
	}

	protected attemptJson(body: string): object | undefined {
		try {
			return JSON.parse(body);
		} catch (ex) {
			return undefined;
		}
	}

	protected async handleErrorResponse(response: Response): Promise<Error> {
		const body = await response.text();
		const json = this.attemptJson(body);
		if (!json) {
			Logger.warn(
				`Unknown error, non-json response: ${response.status} ${response.statusText} ${body}`
			);
		}
		if (isNrCsecError(json)) {
			if (json.error === "Forbidden" && json.status === 403) {
				return new ResponseError<{ url: string }>(ERROR_VM_NOT_SETUP, "VM possibly not setup", {
					url: this.productUrl,
				});
			} else {
				Logger.warn(`Unknown error: ${json.status} ${json.error}: ${json.message}`);
				return new ResponseError(ERROR_GENERIC_USE_ERROR_MESSAGE, "Unknown error");
			}
		}
		return super.handleErrorResponse(response);
	}

	@lspHandler(GetCsecLibraryDetailsType)
	@log()
	async getCsecLibraryDetails(
		request: GetCsecLibraryDetailsRequest
	): Promise<GetCsecLibraryDetailsResponse> {
		// const data = await this.fetchCsecLibraries(request.entityGuid, request.accountId);
		console.log(request);
		const data = {
			libraries: [
				{
					accountId: "11188139",
					collectorType: "JAVA",
					timestamp: 1698823850644,
					eventType: "sec_iast_record",
					applicationSHA256: "",
					applicationUUID: "dec2869a-266f-4a06-b94d-fe437d1f57d5",
					sourceMethod: "java.io.FileOutputStream.open(FileOutputStream.java:59)",
					userFileName: "com.k2.testapp.k2javavulnerableperf.controller.FileOperation",
					userMethodName: "writeFilePathByBodyBlind",
					lineNumber: 245,
					vulnerabilityCaseType: "FILE_INTEGRITY",
					incidentId:
						"FILE_INTEGRITY-2125583191856551835MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY51f2a679f-6736-48d4-ad80-63dab8edfd6e1",
					traceId: "FILE_INTEGRITY-2125583191856551835",
					status: "VULNERABLE",
					severityLevel: "CRITICAL",
					vulnerabilityDetectionTimestamp: 1698823850636,
					entityName: "ic-k2-java-vulnerable-perf-codestream",
					entityGuid: "MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5",
					payload: null,
					url: "/file/write/blind",
					vulnerabilityType: "Application Integrity Violation",
				},
			],
			totalRecords: 1,
			recordCount: 1,
		};
		return data;
	}

	riskSeverityToCriticality(riskSeverity: RiskSeverity): CriticalityType {
		switch (riskSeverity) {
			case "CRITICAL":
				return "CRITICAL";
			case "HIGH":
				return "HIGH";
			case "MEDIUM":
				return "MODERATE";
			case "LOW":
				return "LOW";
			default:
				return "LOW";
		}
	}

	private async fetchCsecLibraries(entityGuid: string, accountId: number): Promise<any> {
		// const cached = this.csecLibraryDataCache.get({ entityGuid, accountId });
		// if (cached) {
		// 	Logger.debug("Fetch csec libraries got from cache");
		// 	return cached;
		// }
		// Logger.debug("Fetch csec libraries NOT in cache");
		const applicationUUIDsPath = `/v1/csec/application/list/scanned/accounts/11188139?limit=5&scanType=scannedApplication&entityGuid=MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5`;
		// const applicationUUIDsResponse = await this.get<CsecApplicationUUIDs>(
		// 	applicationUUIDsPath,
		// 	undefined,
		// 	options
		// );

		const applicationUUIDsResponse = { body: [{}] };

		const fakeDataApplicationUUID = {
			entityGuid: "MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5",
			accountId: 11188139,
			timestamp: 1698824218884,
			entityName: "ic-k2-java-vulnerable-perf-codestream",
			applicationUUID: "dec2869a-266f-4a06-b94d-fe437d1f57d5",
			totalTraceCount: 74,
			totalVulnerableTraceCount: 68,
			totalUrlCount: 24,
			totalVulnerableUrlCount: 23,
			totalSourceMethodCount: 50,
			totalVulnerableSourceMethodCount: 48,
			collectorType: "JAVA",
		};

		applicationUUIDsResponse.body.push(fakeDataApplicationUUID);

		const vulernableRecordsPath = `/v1/csec/trace/list/accounts/11188139?begin=1695106476323&end=1698824218884&status=VULNERABLE&sortBy=timestamp&applicationUUID=dec2869a-266f-4a06-b94d-fe437d1f57d5&entityGUID=MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5`;

		// const vulernableRecordsResponse = await this.get<CsecEntityLibraries>(
		// 	vulernableRecordsPath,
		// 	undefined,
		// 	options
		// );

		const vulnerableRecordsResponse = { body: [{}] };

		const fakeDataVulnerableRecords = {
			accountId: "11188139",
			collectorType: "JAVA",
			timestamp: 1698823850644,
			eventType: "sec_iast_record",
			applicationSHA256: "",
			applicationUUID: "dec2869a-266f-4a06-b94d-fe437d1f57d5",
			sourceMethod: "java.io.FileOutputStream.open(FileOutputStream.java:59)",
			userFileName: "com.k2.testapp.k2javavulnerableperf.controller.FileOperation",
			userMethodName: "writeFilePathByBodyBlind",
			lineNumber: 245,
			vulnerabilityCaseType: "FILE_INTEGRITY",
			incidentId:
				"FILE_INTEGRITY-2125583191856551835MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY51f2a679f-6736-48d4-ad80-63dab8edfd6e1",
			traceId: "FILE_INTEGRITY-2125583191856551835",
			status: "VULNERABLE",
			severityLevel: "CRITICAL",
			vulnerabilityDetectionTimestamp: 1698823850636,
			entityName: "ic-k2-java-vulnerable-perf-codestream",
			entityGuid: "MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5",
			payload: null,
			url: "/file/write/blind",
			vulnerabilityType: "Application Integrity Violation",
		};

		vulnerableRecordsResponse.body.push(fakeDataVulnerableRecords);

		return vulnerableRecordsResponse;
	}
}
