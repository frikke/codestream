import { Response } from "undici";
import { isEmpty } from "lodash";
import Cache from "timed-cache";
import { ResponseError } from "vscode-jsonrpc/lib/messages";
import {
	criticalityList,
	CriticalityType,
	ERROR_GENERIC_USE_ERROR_MESSAGE,
	ERROR_VM_NOT_SETUP,
	GetCsecLibraryDetailsRequest,
	GetCsecLibraryDetailsResponse,
	GetCsecLibraryDetailsType,
	CsecLibraryDetails,
	RiskSeverity,
	ThirdPartyDisconnect,
	ThirdPartyProviderConfig,
	CsecVuln,
} from "@codestream/protocols/agent";

import { SessionContainer } from "../../../container";
import { Logger } from "../../../logger";
import { CodeStreamSession } from "../../../session";
import { log, lspHandler, lspProvider } from "../../../system";
import { ThirdPartyProviderBase } from "../../thirdPartyProviderBase";
import { CsecEntityLibraries, CsecVulnerableLibrary } from "./types";
import { ExtraRequestInit } from "../../../system/fetchCore";

const API_TIMEOUT = 30000;

const options: ExtraRequestInit = {
	timeout: API_TIMEOUT,
};

export type NrSecError = {
	timestamp?: number;
	status?: number;
	error?: string;
	message?: string;
	path?: string;
};

export function isNrSecError(obj: unknown): obj is NrSecError {
	const maybe = obj as NrSecError;
	return (
		typeof maybe.timestamp === "number" &&
		typeof maybe.status === "number" &&
		!isEmpty(maybe.error) &&
		!isEmpty(maybe.message) &&
		!isEmpty(maybe.path)
	);
}

const critScore: Record<CriticalityType, number> = {
	CRITICAL: 5,
	HIGH: 4,
	MODERATE: 3,
	LOW: 2,
};

function isCriticalityType(maybe: unknown): maybe is CriticalityType {
	return criticalityList.includes(maybe as CriticalityType);
}

function maxCriticality(highestCriticality: CriticalityType, criticality: string): CriticalityType {
	if (!isCriticalityType(criticality)) {
		return highestCriticality;
	}
	if (critScore[highestCriticality] < critScore[criticality]) {
		return criticality;
	} else {
		return highestCriticality;
	}
}

@lspProvider("newrelic-csec")
export class CsecVulnerabilitiesProvider extends ThirdPartyProviderBase {
	private csecLibraryDataCache = new Cache<CsecEntityLibraries>({ defaultTtl: 1800 * 1000 }); // 30 minutes

	constructor(session: CodeStreamSession, config: ThirdPartyProviderConfig) {
		super(session, config);
	}

	get displayName(): string {
		return "Iast Vulnerability Management";
	}

	get headers(): { [p: string]: string } {
		const accessToken = this.accessToken;
		if (!accessToken) {
			throw new Error(`Missing accessToken for ${this.name}`);
		}
		return {
			Authorization: `Bearer ${accessToken}`,
			"Content-Type": "application/json",
		};
	}

	get name(): string {
		return "newrelic"; // Use existing providerInfo to get API key
	}

	get baseUrl(): string {
		return this.apiUrl;
	}

	get apiUrl() {
		const csecApiUrl = SessionContainer.instance().session.csecApiUrl;
		return csecApiUrl || "https://csec-workflow-api.staging-service.newrelic.com";
	}

	get productUrl() {
		return this.apiUrl.indexOf("staging") > -1
			? "https://staging-one.newrelic.com/iast"
			: "https://one.newrelic.com/iast";
	}

	@log()
	async onDisconnected(request?: ThirdPartyDisconnect) {
		this.csecLibraryDataCache.clear();

		return super.onDisconnected(request);
	}

	protected attemptJson(body: string): object | undefined {
		try {
			return JSON.parse(body);
		} catch (ex) {
			return undefined;
		}
	}

	protected async handleErrorResponse(response: Response): Promise<Error> {
		const body = await response.text();
		const json = this.attemptJson(body);
		if (!json) {
			Logger.warn(
				`Unknown error, non-json response: ${response.status} ${response.statusText} ${body}`
			);
		}
		if (isNrSecError(json)) {
			if (json.error === "Forbidden" && json.status === 403) {
				return new ResponseError<{ url: string }>(ERROR_VM_NOT_SETUP, "VM possibly not setup", {
					url: this.productUrl,
				});
			} else {
				Logger.warn(`Unknown error: ${json.status} ${json.error}: ${json.message}`);
				return new ResponseError(ERROR_GENERIC_USE_ERROR_MESSAGE, "Unknown error");
			}
		}
		return super.handleErrorResponse(response);
	}

	@lspHandler(GetCsecLibraryDetailsType)
	@log()
	async getCsecLibraryDetails(
		request: GetCsecLibraryDetailsRequest
	): Promise<GetCsecLibraryDetailsResponse> {
		const data = await this.doGetCsecLibraryDetails(request);
		const { rows = 5 } = request;
		const libraries = rows === "all" ? data : data.slice(0, rows);
		return {
			libraries,
			recordCount: libraries.length,
			totalRecords: data.length,
		};
	}

	riskSeverityToCriticality(riskSeverity: RiskSeverity): CriticalityType {
		switch (riskSeverity) {
			case "CRITICAL":
				return "CRITICAL";
			case "HIGH":
				return "HIGH";
			case "MEDIUM":
				return "MODERATE";
			case "LOW":
				return "LOW";
			default:
				return "LOW";
		}
	}

	csecProcessLibraries(
		csecLibraries: Array<CsecVulnerableLibrary>,
		severityFilter?: RiskSeverity[]
	) {
		const csecLibraryDetails = new Array<CsecLibraryDetails>();
		for (const csecLibrary of csecLibraries) {
			const vulnerabilities = csecLibrary.includedVersions[0].vulnerabilities;
			if (!vulnerabilities || vulnerabilities.length === 0) {
				continue;
			}

			let highestScore = 0;
			let highestCriticality: CriticalityType = "LOW";
			const vulnResponse = new Array<CsecVuln>();
			for (const finding of vulnerabilities) {
				if (csecLibrary.language && csecLibrary.language !== finding.language) {
					continue;
				}
				const filterValues = severityFilter?.map(this.riskSeverityToCriticality);
				if (filterValues && !isEmpty(filterValues)) {
					if (!filterValues.includes(finding.criticality)) {
						continue;
					}
				}
				highestScore = Math.max(highestScore, finding.score);
				highestCriticality = maxCriticality(highestCriticality, finding.criticality);
				vulnResponse.push({
					criticality: finding.criticality,
					description: finding.description,
					issueId: finding.cve,
					remediation: finding.remediation,
					score: finding.score,
					title: finding.title,
					url: finding.url,
					source: finding.source ?? "New Relic",
					vector: finding.vector,
				});
			}

			vulnResponse.sort((a, b) => b.score - a.score);

			if (vulnResponse.length > 0) {
				csecLibraryDetails.push({
					name: csecLibrary.name,
					version: csecLibrary.includedVersions[0].version ?? "unknown",
					suggestedVersion: csecLibrary.suggestedVersion?.version,
					language: csecLibrary.language,
					highestScore,
					highestCriticality,
					vulns: vulnResponse,
				});
			}
		}
		return csecLibraryDetails;
	}

	async doGetCsecLibraryDetails(
		request: GetCsecLibraryDetailsRequest
	): Promise<Array<CsecLibraryDetails>> {
		const { entityGuid, accountId } = request;
		const allCsecLibraries = await this.fetchCsecLibraries(entityGuid, accountId);
		const csecFilteredLibraries = allCsecLibraries.libraries.filter(_ => {
			let count = 0;
			for (const i of _.includedVersions) {
				count += i.criticalVulnerabilities + i.highVulnerabilities + i.otherVulnerabilities;
			}
			return count > 0;
		});

		return this.csecProcessLibraries(csecFilteredLibraries, request.severityFilter);
	}

	private async fetchCsecLibraries(
		entityGuid: string,
		accountId: number
	): Promise<CsecEntityLibraries> {
		const cached = this.csecLibraryDataCache.get({ entityGuid, accountId });
		if (cached) {
			Logger.debug("Fetch csec libraries got from cache");
			return cached;
		}
		Logger.debug("Fetch csec libraries NOT in cache");
		const path = `/v1/csec/application/list/scanned/accounts/11188139?limit=5&scanType=scannedApplication&entityGuid=MTExODgxMzl8QVBNfEFQUExJQ0FUSU9OfDk3ODUxMzY5`;
		console.log(path);
		const response = await this.get<CsecEntityLibraries>(path, undefined, options);
		this.csecLibraryDataCache.put({ entityGuid, accountId }, response.body);
		return response.body;
	}
}
